{"version":3,"sources":["src/app.ts","src/environment.ts","src/main.ts","src/todo.ts","src/resources/index.ts"],"names":[],"mappings":";;;IAKA;QAAA;YAGE,YAAO,GAAG,UAAU,CAAC;YAGrB,YAAO,GAAG,EAAE,CAAC;YAGb,UAAK,GAAY,EAAE,CAAC;QAmBtB,CAAC;QAhBC,qBAAO,GAAP;YAGE,EAAE,CAAA,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA,CAAC;gBACf,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,WAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBACxC,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;YACpB,CAAC;QACH,CAAC;QAGD,wBAAU,GAAV,UAAW,IAAI;YACb,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACrC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAA,CAAC;gBACf,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAC,CAAC,CAAC,CAAC;YAC7B,CAAC;QACH,CAAC;QACH,UAAC;IAAD,CA5BA,AA4BC,IAAA;IA5BY,kBAAG;;;;;;;;ICLhB,kBAAe;QACb,KAAK,EAAE,IAAI;QACX,OAAO,EAAE,IAAI;KACd,CAAC;;;;;;;;ICAF,mBAA0B,OAAgB;QACxC,OAAO,CAAC,GAAG;aACR,qBAAqB,EAAE;aACvB,OAAO,CAAC,WAAW,CAAC,CAAC;QAExB,EAAE,CAAC,CAAC,qBAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YACtB,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,EAAE,CAAC,CAAC,qBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;YACxB,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACxC,CAAC;QAED,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,cAAM,OAAA,OAAO,CAAC,OAAO,EAAE,EAAjB,CAAiB,CAAC,CAAC;IAChD,CAAC;IAdD,8BAcC;;;;;;;;IChBD;QAQA,cAAmB,WAAoB;YAApB,gBAAW,GAAX,WAAW,CAAS;YALnC,SAAI,GAAG,KAAK,CAAC;YACb,SAAI,GAAG,KAAK,CAAC;QAKb,CAAC;QACL,WAAC;IAAD,CAVA,AAUC,IAAA;IAVY,oBAAI;;;;;;;;ICCjB,mBAA0B,MAA8B;IAExD,CAAC;IAFD,8BAEC","file":"app-bundle.js","sourcesContent":["//importing class from todo.ts file\nimport{Todo} from './todo';\n\n\n\nexport class App {\n \n//Heading \n  heading = 'My Tasks';\n\n//New task, initially set to null until updated by user\n  newTodo = '';\n\n//Array that where tasks will be stored\n  todos : Todo[] = [];\n\n//Method for adding a task\n  addTodo(){\n\n//if it is the first task, create new array & push task     \n    if(this.newTodo){\n      this.todos.push(new Todo(this.newTodo));\n      this.newTodo = '';\n    }\n  }\n\n//if array is not empty, splice by 1\n  removeTodo(todo){\n    let index = this.todos.indexOf(todo);\n    if (index != -1){\n      this.todos.splice(index,1);\n    }\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import {Aurelia} from 'aurelia-framework'\nimport environment from './environment';\n\nexport function configure(aurelia: Aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","\r\nexport class Todo{\r\n\r\n//initial conditions\r\n    edit = false;\r\n    done = false; \r\n\r\n\r\n//constructor to hold string value of task\r\nconstructor(public description : string){\r\n    }\r\n}","import {FrameworkConfiguration} from 'aurelia-framework';\n\nexport function configure(config: FrameworkConfiguration) {\n  //config.globalResources([]);\n}\n"],"sourceRoot":".."}